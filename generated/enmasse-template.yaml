---
apiVersion: v1
kind: Template
metadata:
  labels:
    app: enmasse
  name: enmasse
objects:
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: queue-inmemory
  objects:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${NAME}
        app: enmasse
        group_id: "${NAME}"
      name: "${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${NAME}
          volumes:
          - emptyDir: {}
            name: vol-${NAME}
          - configMap:
              name: hawkular-config-${NAME}
            name: hawkular-openshift-agent
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": false}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        type: address-config
      name: address-config-${NAME}
  - apiVersion: v1
    data:
      hawkular-openshift-agent: '{"endpoints": [{"collection_interval": "60s", "metrics":
        [{"id": "VM Heap Memory Used", "name": "java.lang:type=Memory#HeapMemoryUsage#used",
        "type": "gauge"}], "path": "/jolokia", "port": 8161, "protocol": "http", "type":
        "jolokia"}]}'
    kind: ConfigMap
    metadata:
      name: hawkular-config-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: queue-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
      name: pvc-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: "${STORAGE_CAPACITY}"
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${NAME}
        app: enmasse
        group_id: "${NAME}"
      name: "${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${NAME}
          volumes:
          - name: vol-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${NAME}
          - configMap:
              name: hawkular-config-${NAME}
            name: hawkular-openshift-agent
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": false}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        type: address-config
      name: address-config-${NAME}
  - apiVersion: v1
    data:
      hawkular-openshift-agent: '{"endpoints": [{"collection_interval": "60s", "metrics":
        [{"id": "VM Heap Memory Used", "name": "java.lang:type=Memory#HeapMemoryUsage#used",
        "type": "gauge"}], "path": "/jolokia", "port": 8161, "protocol": "http", "type":
        "jolokia"}]}'
    kind: ConfigMap
    metadata:
      name: hawkular-config-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: topic-inmemory
  objects:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${NAME}
        app: enmasse
        group_id: "${NAME}"
      name: "${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${NAME}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${ROUTER_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 55673
              name: internal
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${TOPIC_FORWARDER_REPO}:latest"
            livenessProbe:
              httpGet:
                path: "/health"
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
          volumes:
          - emptyDir: {}
            name: vol-${NAME}
          - configMap:
              name: hawkular-config-${NAME}
            name: hawkular-openshift-agent
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": true}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        type: address-config
      name: address-config-${NAME}
  - apiVersion: v1
    data:
      hawkular-openshift-agent: '{"endpoints": [{"collection_interval": "60s", "metrics":
        [{"id": "VM Heap Memory Used", "name": "java.lang:type=Memory#HeapMemoryUsage#used",
        "type": "gauge"}], "path": "/jolokia", "port": 8161, "protocol": "http", "type":
        "jolokia"}]}'
    kind: ConfigMap
    metadata:
      name: hawkular-config-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: topic-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
      name: pvc-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: "${STORAGE_CAPACITY}"
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${NAME}
        app: enmasse
        group_id: "${NAME}"
      name: "${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${NAME}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${ROUTER_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 55673
              name: internal
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${TOPIC_FORWARDER_REPO}:latest"
            livenessProbe:
              httpGet:
                path: "/health"
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
          volumes:
          - name: vol-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${NAME}
          - configMap:
              name: hawkular-config-${NAME}
            name: hawkular-openshift-agent
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": true}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        type: address-config
      name: address-config-${NAME}
  - apiVersion: v1
    data:
      hawkular-openshift-agent: '{"endpoints": [{"collection_interval": "60s", "metrics":
        [{"id": "VM Heap Memory Used", "name": "java.lang:type=Memory#HeapMemoryUsage#used",
        "type": "gauge"}], "path": "/jolokia", "port": 8161, "protocol": "http", "type":
        "jolokia"}]}'
    kind: ConfigMap
    metadata:
      name: hawkular-config-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: direct
  objects:
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward":false, "multicast": ${MULTICAST}}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        type: address-config
      name: address-config-${NAME}
  parameters:
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the address
    name: ADDRESS
    required: true
  - description: If the address should have multicast semantics or not
    name: MULTICAST
    required: true
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: enmasse
    name: restapi
  spec:
    host: "${RESTAPI_HOSTNAME}"
    path: "/v3/address"
    port:
      targetPort: restapi
    to:
      kind: Service
      name: admin
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: qdrouterd
    name: qdrouterd
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          capability: router
          name: qdrouterd
      spec:
        containers:
        - env:
          - name: LINK_CAPACITY
            value: "${ROUTER_LINK_CAPACITY}"
          image: "${ROUTER_REPO}:latest"
          livenessProbe:
            tcpSocket:
              port: amqp
          name: router
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 55673
            name: internal
            protocol: TCP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"admin","namespace":"","kind":"Service"},{"name":"subscription","namespace":"","kind":"Service"},{"name":"mqtt","namespace":"","kind":"Service"}]'
      service.alpha.openshift.io/infrastructure: 'true'
    labels:
      app: enmasse
    name: messaging
  spec:
    ports:
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    - name: internal
      port: 55673
      protocol: TCP
      targetPort: 55673
    selector:
      capability: router
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: subserv
    name: subserv
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          name: subserv
      spec:
        containers:
        - image: "${SUBSERV_REPO}:latest"
          livenessProbe:
            tcpSocket:
              port: amqp
          name: subserv
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          resources:
            limits:
              memory: 64Mi
            requests:
              memory: 64Mi
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: subscription
  spec:
    ports:
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      name: subserv
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: mqtt-gateway
    name: mqtt-gateway
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          name: mqtt-gateway
      spec:
        containers:
        - image: "${MQTT_GATEWAY_REPO}:latest"
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: mqtt
          name: mqtt-gateway
          ports:
          - containerPort: 1883
            name: mqtt
            protocol: TCP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: mqtt
  spec:
    ports:
    - name: mqtt
      port: 1883
      protocol: TCP
      targetPort: 1883
    selector:
      name: mqtt-gateway
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: mqtt-lwt
    name: mqtt-lwt
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          name: mqtt-lwt
      spec:
        containers:
        - image: "${MQTT_LWT_REPO}:latest"
          name: mqtt-lwt
- apiVersion: v1
  data:
    json: '{"large-persisted-queue": {"description": "Large queue with persistence",
      "templateName": "queue-persisted", "templateParameters": {"STORAGE_CAPACITY":
      "10Gi"}, "type": "queue"}, "large-persisted-topic": {"description": "Large topic
      with persistence", "templateName": "topic-persisted", "templateParameters":
      {"STORAGE_CAPACITY": "10Gi"}, "type": "topic"}, "small-persisted-queue": {"description":
      "Small queue with persistence", "templateName": "queue-persisted", "templateParameters":
      {"STORAGE_CAPACITY": "1Gi"}, "type": "queue"}, "small-persisted-topic": {"description":
      "Small topic with persistence", "templateName": "topic-persisted", "templateParameters":
      {"STORAGE_CAPACITY": "1Gi"}, "type": "topic"}, "vanilla-queue": {"description":
      "Simple in memory queue", "templateName": "queue-inmemory", "type": "queue"},
      "vanilla-topic": {"description": "Simple in memory topic", "templateName": "topic-inmemory",
      "type": "topic"}}'
  kind: ConfigMap
  metadata:
    labels:
      app: enmasse
    name: flavor
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: admin
    name: admin
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          name: admin
      spec:
        containers:
        - image: "${ADDRESS_CONTROLLER_REPO}:latest"
          livenessProbe:
            tcpSocket:
              port: amqp
          name: address-controller
          ports:
          - containerPort: 55674
            name: amqp
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 256Mi
        - env:
          - name: CONFIGURATION_SERVICE_HOST
            value: localhost
          - name: CONFIGURATION_SERVICE_PORT
            value: '5672'
          image: "${RAGENT_REPO}:latest"
          livenessProbe:
            tcpSocket:
              port: amqp
          name: ragent
          ports:
          - containerPort: 55672
            name: amqp
            protocol: TCP
          resources:
            limits:
              memory: 64Mi
            requests:
              memory: 64Mi
        - env:
          - name: CONFIGURATION_SERVICE_HOST
            value: localhost
          - name: CONFIGURATION_SERVICE_PORT
            value: '5672'
          image: "${QUEUE_SCHEDULER_REPO}:latest"
          livenessProbe:
            tcpSocket:
              port: amqp
          name: queue-scheduler
          ports:
          - containerPort: 55667
            name: amqp
            protocol: TCP
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 128Mi
        - image: "${CONFIGSERV_REPO}:latest"
          livenessProbe:
            tcpSocket:
              port: amqp
          name: configserv
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 256Mi
        serviceAccount: deployer
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: admin
  spec:
    ports:
    - name: ragent
      port: 55672
    - name: restapi
      port: 8080
    - name: configuration
      port: 5672
    - name: address-controller
      port: 55674
    - name: queue-scheduler
      port: 55667
    selector:
      name: admin
parameters:
- description: The image to use for the router
  name: ROUTER_REPO
  value: enmasseproject/qdrouterd
- description: The default image to use as broker
  name: BROKER_REPO
  value: enmasseproject/artemis
- description: The default image to use as topic forwarder
  name: TOPIC_FORWARDER_REPO
  value: enmasseproject/topic-forwarder
- description: The link capacity setting for router
  name: ROUTER_LINK_CAPACITY
  value: '50'
- description: The image to use for the configuration service
  name: CONFIGSERV_REPO
  value: enmasseproject/configserv
- description: The docker image to use for the address controller
  name: ADDRESS_CONTROLLER_REPO
  value: enmasseproject/address-controller
- description: The docker image to use for the queue scheduler
  name: QUEUE_SCHEDULER_REPO
  value: enmasseproject/queue-scheduler
- description: The image to use for the router agent
  name: RAGENT_REPO
  value: enmasseproject/ragent
- description: The image to use for the subscription services
  name: SUBSERV_REPO
  value: enmasseproject/subserv
- description: The hostname to use for the exposed route for messaging (TLS only)
  name: MESSAGING_HOSTNAME
- description: The hostname to use for the exposed route for the REST API
  name: RESTAPI_HOSTNAME
- description: The image to use for the MQTT gateway
  name: MQTT_GATEWAY_REPO
  value: enmasseproject/mqtt-gateway
- description: The hostname to use for the exposed route for MQTT (TLS only)
  name: MQTT_GATEWAY_HOSTNAME
- description: The image to use for the MQTT LWT
  name: MQTT_LWT_REPO
  value: enmasseproject/mqtt-lwt
